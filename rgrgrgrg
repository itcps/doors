-- DOORS ESP Script using Criminality UI Library
-- Author: itcps (adapted)
-- Version: 3.3

-- Load Criminality UI Library
local library = loadstring(game:HttpGet('https://raw.githubusercontent.com/weakhoes/Roblox-UI-Libs/refs/heads/main/Criminality%20Lib/Criminality%20Lib%20Source.lua'))()

-- Wait for game to load
if game.Players.LocalPlayer and game.Players.LocalPlayer.PlayerGui:FindFirstChild("LoadingUI") and game.Players.LocalPlayer.PlayerGui.LoadingUI.Enabled then
    print("[DOORS ESP] Waiting for game to load...")
    repeat task.wait() until not game.Players.LocalPlayer.PlayerGui:FindFirstChild("LoadingUI") or not game.Players.LocalPlayer.PlayerGui.LoadingUI.Enabled
end

-- Variables
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

-- ESP Tables
local ESPTable = {
    Chest = {},
    Door = {},
    Entity = {},
    Item = {},
    HidingSpot = {},
    Gold = {}
}

-- Entity Information
local EntityTable = {
    Names = {"BackdoorRush", "BackdoorLookman", "RushMoving", "AmbushMoving", "Eyes", "JeffTheKiller", "Dread", "A60", "A120"},
    ShortNames = {
        BackdoorRush = "Blitz",
        JeffTheKiller = "Jeff The Killer",
        RushMoving = "Rush",
        AmbushMoving = "Ambush",
        A60 = "A-60",
        A120 = "A-120",
        BackdoorLookman = "Lookman"
    },
    Colors = {
        BackdoorRush = Color3.new(1, 0, 0),
        RushMoving = Color3.new(1, 0, 0),
        AmbushMoving = Color3.new(1, 0.5, 0),
        Eyes = Color3.new(1, 1, 0),
        JeffTheKiller = Color3.new(0.5, 0, 0.5),
        A60 = Color3.new(1, 0, 1),
        A120 = Color3.new(0.5, 0, 1),
        BackdoorLookman = Color3.new(0, 1, 1)
    }
}

-- Settings
local Settings = {
    ESPEnabled = false,
    EntityESP = false,
    ItemESP = false,
    DoorESP = false,
    ChestESP = false,
    HidingSpotESP = false,
    GoldESP = false,
    ESPThickness = 2,
    ESPDistance = 500,
    ShowNames = true,
    ShowDistance = true
}

-- Utility Functions
local function GetShortName(name)
    return EntityTable.ShortNames[name] or name
end

local function GetEntityColor(name)
    return EntityTable.Colors[name] or Color3.new(1, 1, 1)
end

local function DistanceFromCharacter(object)
    local character = LocalPlayer.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return math.huge end

    local rootPart = character.HumanoidRootPart
    local objectPosition = object:IsA("BasePart") and object.Position or object:GetPivot().Position

    return (rootPart.Position - objectPosition).Magnitude
end

local function CreateESP(object, espType, color, text)
    if not object then return end

    local esp = Drawing.new("Box")
    esp.Visible = false
    esp.Color = color or Color3.new(1, 1, 1)
    esp.Thickness = Settings.ESPThickness
    esp.Transparency = 1
    esp.Filled = false

    local nameTag = Drawing.new("Text")
    nameTag.Visible = false
    nameTag.Color = color or Color3.new(1, 1, 1)
    nameTag.Size = 20
    nameTag.Center = true
    nameTag.Outline = true
    nameTag.OutlineColor = Color3.new(0, 0, 0)
    nameTag.Text = text or object.Name

    table.insert(ESPTable[espType], esp)
    table.insert(ESPTable[espType], nameTag)

    return esp, nameTag
end

local function RemoveESP(espType)
    for _, esp in pairs(ESPTable[espType]) do
        if esp and esp.Remove then
            esp:Remove()
        end
    end
    ESPTable[espType] = {}
end

local function UpdateESP()
    for espType, espList in pairs(ESPTable) do
        for i = 1, #espList, 2 do
            local esp = espList[i]
            local nameTag = espList[i + 1]

            if esp and nameTag then
                esp.Visible = false
                nameTag.Visible = false
            end
        end
    end
end

-- ESP Functions
local function EntityESP(entity)
    if not entity or not entity:FindFirstChild("PrimaryPart") then return end

    local shortName = GetShortName(entity.Name)
    local color = GetEntityColor(entity.Name)
    local distance = DistanceFromCharacter(entity)

    local displayText = shortName
    if Settings.ShowDistance then
        displayText = displayText .. " [" .. math.floor(distance) .. "m]"
    end

    local esp, nameTag = CreateESP(entity, "Entity", color, displayText)

    if esp and nameTag then
        esp.Visible = true
        nameTag.Visible = true

        local success, position = pcall(function()
            return Camera:WorldToViewportPoint(entity:GetPivot().Position)
        end)

        if success and position.Z > 0 then
            local size = entity.PrimaryPart.Size
            local topLeft = Camera:WorldToViewportPoint((entity:GetPivot() * CFrame.new(-size.X/2, size.Y/2, -size.Z/2)).Position)
            local bottomRight = Camera:WorldToViewportPoint((entity:GetPivot() * CFrame.new(size.X/2, -size.Y/2, size.Z/2)).Position)

            esp.Size = Vector2.new(bottomRight.X - topLeft.X, bottomRight.Y - topLeft.Y)
            esp.Position = Vector2.new(topLeft.X, topLeft.Y)
            nameTag.Position = Vector2.new(topLeft.X + (bottomRight.X - topLeft.X) / 2, topLeft.Y - 25)
        end
    end
end

local function GenericESP(object, espType, color, displayName)
    if not object or not object:IsA("BasePart") then return end

    local distance = DistanceFromCharacter(object)
    local displayText = displayName
    if Settings.ShowDistance then
        displayText = displayText .. " [" .. math.floor(distance) .. "m]"
    end

    local esp, nameTag = CreateESP(object, espType, color, displayText)

    if esp and nameTag then
        esp.Visible = true
        nameTag.Visible = true

        local success, position = pcall(function()
            return Camera:WorldToViewportPoint(object.Position)
        end)

        if success and position.Z > 0 then
            local size = object.Size
            local topLeft = Camera:WorldToViewportPoint((object.CFrame * CFrame.new(-size.X/2, size.Y/2, -size.Z/2)).Position)
            local bottomRight = Camera:WorldToViewportPoint((object.CFrame * CFrame.new(size.X/2, -size.Y/2, size.Z/2)).Position)

            esp.Size = Vector2.new(bottomRight.X - topLeft.X, bottomRight.Y - topLeft.Y)
            esp.Position = Vector2.new(topLeft.X, topLeft.Y)
            nameTag.Position = Vector2.new(topLeft.X + (bottomRight.X - topLeft.X) / 2, topLeft.Y - 25)
        end
    end
end

-- UI Setup
local window = library.new('DOORS ESP', 'DOORS ESP')

-- Create Tabs
local tab1 = window.new_tab('rbxassetid://4483345998')

-- Create Sections
local section1 = tab1.new_section('ESP Features')
local section2 = tab1.new_section('Settings')

-- Create Sectors
local sector1 = section1.new_sector('Main ESP', 'Left')
local sector2 = section1.new_sector('Additional ESP', 'Right')
local sector3 = section2.new_sector('Controls', 'Left')
local sector4 = section2.new_sector('Display Options', 'Right')

-- Elements with correct syntax based on library source
local masterESP = sector1.element('Toggle', 'Master ESP', {default = {Toggle = false}}, function(v)
    Settings.ESPEnabled = v.Toggle
    print("Master ESP:", v.Toggle)
end)

local entityESP = sector1.element('Toggle', 'Entity ESP', {default = {Toggle = false}}, function(v)
    Settings.EntityESP = v.Toggle
    print("Entity ESP:", v.Toggle)
end)

local itemESP = sector1.element('Toggle', 'Item ESP', {default = {Toggle = false}}, function(v)
    Settings.ItemESP = v.Toggle
    print("Item ESP:", v.Toggle)
end)

local doorESP = sector2.element('Toggle', 'Door ESP', {default = {Toggle = false}}, function(v)
    Settings.DoorESP = v.Toggle
    print("Door ESP:", v.Toggle)
end)

local chestESP = sector2.element('Toggle', 'Chest ESP', {default = {Toggle = false}}, function(v)
    Settings.ChestESP = v.Toggle
    print("Chest ESP:", v.Toggle)
end)

local hidingESP = sector2.element('Toggle', 'Hiding Spot ESP', {default = {Toggle = false}}, function(v)
    Settings.HidingSpotESP = v.Toggle
    print("Hiding Spot ESP:", v.Toggle)
end)

local goldESP = sector2.element('Toggle', 'Gold ESP', {default = {Toggle = false}}, function(v)
    Settings.GoldESP = v.Toggle
    print("Gold ESP:", v.Toggle)
end)

-- Control buttons
local clearButton = sector3.element('Button', 'Clear All ESP', nil, function()
    for espType in pairs(ESPTable) do
        RemoveESP(espType)
    end
    print("[DOORS ESP] All ESP cleared!")
end)

-- Slider for thickness
local thicknessSlider = sector3.element('Slider', 'ESP Thickness', {default = {min = 1, max = 10, default = 2}}, function(v)
    Settings.ESPThickness = v.Slider
    print("ESP Thickness:", v.Slider)
end)

-- Slider for distance
local distanceSlider = sector3.element('Slider', 'ESP Distance', {default = {min = 100, max = 1000, default = 500}}, function(v)
    Settings.ESPDistance = v.Slider
    print("ESP Distance:", v.Slider)
end)

-- Display options
local showNames = sector4.element('Toggle', 'Show Names', {default = {Toggle = true}}, function(v)
    Settings.ShowNames = v.Toggle
    print("Show Names:", v.Toggle)
end)

local showDistance = sector4.element('Toggle', 'Show Distance', {default = {Toggle = true}}, function(v)
    Settings.ShowDistance = v.Toggle
    print("Show Distance:", v.Toggle)
end)

-- Debug counters
local debugCounters = {
    entities = 0,
    items = 0,
    doors = 0,
    chests = 0,
    hiding = 0,
    gold = 0
}

local lastDebugTime = 0

-- Main Loop
local connection
connection = RunService.RenderStepped:Connect(function()
    if not Settings.ESPEnabled then
        UpdateESP()
        return
    end

    UpdateESP()
    
    -- Reset debug counters
    for k,v in pairs(debugCounters) do
        debugCounters[k] = 0
    end

    -- Entity ESP
    if Settings.EntityESP then
        -- Check in CurrentRooms folder for DOORS
        local currentRooms = Workspace:FindFirstChild("CurrentRooms")
        if currentRooms then
            for _, room in pairs(currentRooms:GetChildren()) do
                for _, entity in pairs(room:GetDescendants()) do
                    if entity:IsA("Model") and table.find(EntityTable.Names, entity.Name) then
                        local distance = DistanceFromCharacter(entity)
                        if distance <= Settings.ESPDistance then
                            debugCounters.entities = debugCounters.entities + 1
                            print("[ESP] Found Entity:", entity.Name, "Distance:", math.floor(distance))
                            EntityESP(entity)
                        end
                    end
                end
            end
        end
        
        -- Also check main workspace
        for _, entity in pairs(Workspace:GetChildren()) do
            if entity:IsA("Model") and table.find(EntityTable.Names, entity.Name) then
                local distance = DistanceFromCharacter(entity)
                if distance <= Settings.ESPDistance then
                    debugCounters.entities = debugCounters.entities + 1
                    print("[ESP] Found Entity in Workspace:", entity.Name, "Distance:", math.floor(distance))
                    EntityESP(entity)
                end
            end
        end
    end

    -- Item ESP
    if Settings.ItemESP then
        -- Check CurrentRooms for items
        local currentRooms = Workspace:FindFirstChild("CurrentRooms")
        if currentRooms then
            for _, room in pairs(currentRooms:GetChildren()) do
                for _, item in pairs(room:GetDescendants()) do
                    if item:IsA("BasePart") and (item.Name:find("Item") or item.Name:find("Tool") or item.Name:find("Key") or item.Name:find("Candle") or item.Name:find("Crucifix") or item.Name:find("Flashlight") or item.Name:find("Battery")) then
                        local distance = DistanceFromCharacter(item)
                        if distance <= Settings.ESPDistance then
                            debugCounters.items = debugCounters.items + 1
                            print("[ESP] Found Item:", item.Name, "Distance:", math.floor(distance))
                            GenericESP(item, "Item", Color3.new(0, 1, 0), item.Name)
                        end
                    end
                end
            end
        end
    end

    -- Door ESP
    if Settings.DoorESP then
        local currentRooms = Workspace:FindFirstChild("CurrentRooms")
        if currentRooms then
            for _, room in pairs(currentRooms:GetChildren()) do
                for _, door in pairs(room:GetDescendants()) do
                    if door:IsA("BasePart") and (door.Name:find("Door") or door.Parent.Name:find("Door")) then
                        local distance = DistanceFromCharacter(door)
                        if distance <= Settings.ESPDistance then
                            debugCounters.doors = debugCounters.doors + 1
                            print("[ESP] Found Door:", door.Name, "Distance:", math.floor(distance))
                            GenericESP(door, "Door", Color3.new(0, 0, 1), "Door")
                        end
                    end
                end
            end
        end
    end

    -- Chest ESP
    if Settings.ChestESP then
        local currentRooms = Workspace:FindFirstChild("CurrentRooms")
        if currentRooms then
            for _, room in pairs(currentRooms:GetChildren()) do
                for _, chest in pairs(room:GetDescendants()) do
                    if chest:IsA("BasePart") and (chest.Name:find("Chest") or chest.Name:find("Box") or chest.Name:find("Drawer")) then
                        local distance = DistanceFromCharacter(chest)
                        if distance <= Settings.ESPDistance then
                            debugCounters.chests = debugCounters.chests + 1
                            print("[ESP] Found Chest:", chest.Name, "Distance:", math.floor(distance))
                            GenericESP(chest, "Chest", Color3.new(1, 1, 0), "Chest")
                        end
                    end
                end
            end
        end
    end

    -- Hiding Spot ESP
    if Settings.HidingSpotESP then
        local currentRooms = Workspace:FindFirstChild("CurrentRooms")
        if currentRooms then
            for _, room in pairs(currentRooms:GetChildren()) do
                for _, spot in pairs(room:GetDescendants()) do
                    if spot:IsA("BasePart") and (spot.Name:find("Wardrobe") or spot.Name:find("Locker") or spot.Name:find("Closet") or spot.Name:find("Bed")) then
                        local distance = DistanceFromCharacter(spot)
                        if distance <= Settings.ESPDistance then
                            debugCounters.hiding = debugCounters.hiding + 1
                            print("[ESP] Found Hiding Spot:", spot.Name, "Distance:", math.floor(distance))
                            GenericESP(spot, "HidingSpot", Color3.new(0, 1, 1), "Hiding Spot")
                        end
                    end
                end
            end
        end
    end

    -- Gold ESP
    if Settings.GoldESP then
        local currentRooms = Workspace:FindFirstChild("CurrentRooms")
        if currentRooms then
            for _, room in pairs(currentRooms:GetChildren()) do
                for _, gold in pairs(room:GetDescendants()) do
                    if gold:IsA("BasePart") and (gold.Name:find("Gold") or gold.Name:find("Coin") or gold.Name:find("Money")) then
                        local distance = DistanceFromCharacter(gold)
                        if distance <= Settings.ESPDistance then
                            debugCounters.gold = debugCounters.gold + 1
                            print("[ESP] Found Gold:", gold.Name, "Distance:", math.floor(distance))
                            GenericESP(gold, "Gold", Color3.new(1, 1, 0), "Gold")
                        end
                    end
                end
            end
        end
    end
    
    -- Debug summary every 5 seconds
    local currentTime = tick()
    if currentTime - lastDebugTime >= 5 then
        lastDebugTime = currentTime
        local totalFound = debugCounters.entities + debugCounters.items + debugCounters.doors + debugCounters.chests + debugCounters.hiding + debugCounters.gold
        print("[ESP DEBUG] Found objects - Entities:", debugCounters.entities, "Items:", debugCounters.items, "Doors:", debugCounters.doors, "Chests:", debugCounters.chests, "Hiding:", debugCounters.hiding, "Gold:", debugCounters.gold, "Total:", totalFound)
        
        -- Debug CurrentRooms structure
        local currentRooms = Workspace:FindFirstChild("CurrentRooms")
        if currentRooms then
            print("[ESP DEBUG] CurrentRooms found with", #currentRooms:GetChildren(), "rooms")
        else
            print("[ESP DEBUG] CurrentRooms not found! Checking Workspace structure:")
            for _, child in pairs(Workspace:GetChildren()) do
                if child:IsA("Folder") or child:IsA("Model") then
                    print("[ESP DEBUG] Workspace child:", child.Name, "Type:", child.ClassName)
                end
            end
        end
    end
end)

-- Cleanup function
local function Cleanup()
    for espType in pairs(ESPTable) do
        RemoveESP(espType)
    end
    if connection then
        connection:Disconnect()
    end
    print("[DOORS ESP] Script unloaded!")
end

-- Use Players.PlayerRemoving instead of BindToClose for client
Players.PlayerRemoving:Connect(function(player)
    if player == LocalPlayer then
        Cleanup()
    end
end)

print("[DOORS ESP Criminality] Script loaded successfully!")
